TASK#01

#include <iostream>
using namespace std;

// Define a node structure for doubly linked list
struct Node {
    int data;
    Node* next;
    Node* prev;
};

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();  // create new node
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;

    if (head == NULL) {
        head = newNode;  // If list is empty, new node becomes the head
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;  // Link the new node at the end
        newNode->prev = temp;  // Set the previous pointer of new node
    }
}

// Function to delete a node at the start of the doubly linked list
void deleteAtStart(Node*& head) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }

    Node* temp = head;
    if (head->next == NULL) {
        // If there is only one node in the list
        head = NULL;
    } else {
        // If there are more than one node, adjust the head pointer
        head = head->next;
        head->prev = NULL;  // Set the previous pointer of new head to NULL
    }
    delete temp;  // Free the memory of the deleted node
}

// Function to display the doubly linked list
void display(Node* head) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    cout << "Doubly Linked List: ";
    while (temp != NULL) {
        cout << temp->data << " <-> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = NULL;  // Start with an empty list
    int n, value;

    // Insert some nodes into the doubly linked list
    cout << "How many nodes do you want to insert? ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        insertAtEnd(head, value);
    }

    display(head);

    // Delete the node at the start
    deleteAtStart(head);
    cout << "After deleting the node at the start:\n";
    display(head);

    return 0;
}

TASK#02

#include <iostream>
using namespace std;

// Define a node structure for doubly linked list
struct Node {
    int data;
    Node* next;
    Node* prev;
};

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();  // Create new node
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;

    if (head == NULL) {
        head = newNode;  // If list is empty, new node becomes the head
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;  // Link the new node at the end
        newNode->prev = temp;  // Set the previous pointer of new node
    }
}

// Function to delete a node at a specific position
void deleteAtPosition(Node*& head, int position) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }

    Node* temp = head;

    // If the position is 1, delete the head node
    if (position == 1) {
        head = temp->next;
        if (head != NULL) {
            head->prev = NULL;  // Set the prev pointer of the new head node to NULL
        }
        delete temp;
        return;
    }

    // Traverse to the node just before the one to be deleted
    for (int i = 1; temp != NULL && i < position; i++) {
        temp = temp->next;
    }

    // If position is greater than the number of nodes
    if (temp == NULL) {
        cout << "Position is out of range.\n";
        return;
    }

    // Unlink the node from the list
    Node* nodeToDelete = temp;
    if (temp->next != NULL) {
        temp->next->prev = temp->prev;  // Adjust the prev pointer of the next node
    }
    if (temp->prev != NULL) {
        temp->prev->next = temp->next;  // Adjust the next pointer of the previous node
    }

    delete nodeToDelete;  // Free memory
}

// Function to display the doubly linked list
void display(Node* head) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    cout << "Doubly Linked List: ";
    while (temp != NULL) {
        cout << temp->data << " <-> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = NULL;  // Start with an empty list
    int n, value, position;

    // Insert some nodes into the doubly linked list
    cout << "How many nodes do you want to insert? ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        insertAtEnd(head, value);
    }

    display(head);

    // Ask user for position to delete
    cout << "Enter the position of the node to delete: ";
    cin >> position;

    // Delete the node at the given position
    deleteAtPosition(head, position);
    cout << "After deleting the node at position " << position << ":\n";
    display(head);

    return 0;
}

TASK#03
#include <iostream>
using namespace std;

// Define a node structure for doubly linked list
struct Node {
    int data;
    Node* next;
    Node* prev;
};

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();  // Create a new node
    newNode->data = value;
    newNode->next = NULL;
    newNode->prev = NULL;

    if (head == NULL) {
        head = newNode;  // If list is empty, new node becomes the head
    } else {
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;  // Link the new node at the end
        newNode->prev = temp;  // Set the previous pointer of new node
    }
}

// Function to delete a node at the end of the doubly linked list
void deleteAtEnd(Node*& head) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }

    Node* temp = head;

    // If there's only one node in the list
    if (head->next == NULL) {
        delete head;
        head = NULL;
        return;
    }

    // Traverse to the last node
    while (temp->next != NULL) {
        temp = temp->next;
    }

    // Now temp is pointing to the last node, unlink it
    temp->prev->next = NULL;  // Set the next pointer of the second last node to NULL
    delete temp;  // Free memory of the last node
}

// Function to display the doubly linked list
void display(Node* head) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    cout << "Doubly Linked List: ";
    while (temp != NULL) {
        cout << temp->data << " <-> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

int main() {
    Node* head = NULL;  // Start with an empty list
    int n, value;

    // Insert some nodes into the doubly linked list
    cout << "How many nodes do you want to insert? ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        insertAtEnd(head, value);
    }

    display(head);

    // Delete the node at the end
    deleteAtEnd(head);
    cout << "After deleting the node at the end:\n";
    display(head);

    return 0;
}

TASK#01:

#include <iostream>
using namespace std;

#define MAX_SIZE 3 

class PlateStack {
private:
    int stack[MAX_SIZE];
    int top;              

public:
    PlateStack() {
        top = -1; 
    }

    
    void push(int plate) {
        if (top == MAX_SIZE - 1) {
            cout << "Stack is full. Can't add more plates.\n";
            return;
        }
        stack[++top] = plate;
        cout << "Plate " << plate << " added to the stack.\n";
    }

    
    void pop() {
        if (top == -1) {
            cout << "Stack is empty. No plates to remove.\n";
            return;
        }
        cout << "Plate " << stack[top--] << " removed from the stack.\n";
    }


    void peek() {
        if (top == -1) {
            cout << "Stack is empty. No plate on top.\n";
            return;
        }
        cout << "Top plate is: " << stack[top] << "\n";
    }

    
    void display() {
        if (top == -1) {
            cout << "Stack is empty.\n";
            return;
        }
        cout << "Plates in the stack:\n";
        for (int i = top; i >= 0; i--) {
            cout << stack[i] << "\n";
        }
    }
};

int main() {
    PlateStack s;

    s.push(1);
    s.push(2);
    s.push(3);
    s.push(4); 

    s.peek();    
    s.display(); 

    s.pop();     
    s.pop();
    s.pop();
    s.pop();     
    return 0;
}

TASK#02:

#include <iostream>
#include <string>
using namespace std;
struct Node {
    string item;
    Node* next;
};

class GroceryList {
private:
    Node* head;

public:
    GroceryList() {
        head = NULL;
    }

    void addItem(string newItem) {
        Node* newNode = new Node{newItem, NULL};
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next)
                temp = temp->next;
            temp->next = newNode;
        }
        cout << newItem << " added to the grocery list.\n";
    }


    void removeItem(string itemToRemove) {
        if (!head) {
            cout << "List is empty. Nothing to remove.\n";
            return;
        }

    
        if (head->item == itemToRemove) {
            Node* temp = head;
            head = head->next;
            delete temp;
            cout << itemToRemove << " removed from the list.\n";
            return;
        }

        Node* current = head;
        while (current->next && current->next->item != itemToRemove)
            current = current->next;

        if (current->next) {
            Node* temp = current->next;
            current->next = temp->next;
            delete temp;
            cout << itemToRemove << " removed from the list.\n";
        } else {
            cout << itemToRemove << " not found in the list.\n";
        }
    }

    
    void displayList() {
        if (!head) {
            cout << "Grocery list is empty.\n";
            return;
        }

        cout << "Grocery List:\n";
        Node* temp = head;
        while (temp) {
            cout << "- " << temp->item << "\n";
            temp = temp->next;
        }
    }

    
    ~GroceryList() {
        Node* temp;
        while (head) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    GroceryList gl;

    gl.addItem("Milk");
    gl.addItem("Eggs");
    gl.addItem("Bread");

    gl.displayList();

    gl.removeItem("Eggs");
    gl.displayList();

    gl.removeItem("Butter"); 

    return 0;
}


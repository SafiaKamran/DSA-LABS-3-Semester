TASK#01
#include <iostream>
using namespace std;

// Define a node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();  // create new node
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        // If list is empty
        head = newNode;
    } else {
        // Traverse to the end of the list
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode; // attach new node at end
    }
}

// Function to display the linked list
void display(Node* head) {
    cout << "Linked List: ";
    while (head != NULL) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

int main() {
    Node* head = NULL;  // Start with empty list
    int n, value;

    cout << "How many nodes do you want to insert? ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        insertAtEnd(head, value);
    }

    display(head);

    return 0;
}

TASK#02

#include <iostream>
using namespace std;

// Define a node structure
struct Node {
    int data;
    Node* next;
};

// Function to insert a node at the end
void insertAtEnd(Node*& head, int value) {
    Node* newNode = new Node();  // create new node
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        // If list is empty
        head = newNode;
    } else {
        // Traverse to the end of the list
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode; // attach new node at end
    }
}

// Function to delete the node at the start
void deleteAtStart(Node*& head) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }
    Node* temp = head;
    head = head->next;  // move head to the next node
    delete temp;  // free memory
}

// Function to delete a node at a specific position
void deleteAtPosition(Node*& head, int position) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }

    Node* temp = head;

    if (position == 1) {
        head = temp->next;
        delete temp;  // free memory
        return;
    }

    // Traverse to the node just before the one to be deleted
    for (int i = 1; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    // If the position is greater than the number of nodes
    if (temp == NULL || temp->next == NULL) {
        cout << "Position is out of range.\n";
        return;
    }

    // Node temp->next is the node to be deleted
    Node* nodeToDelete = temp->next;
    temp->next = temp->next->next;  // unlink the node from the list
    delete nodeToDelete;  // free memory
}

// Function to delete the node at the end
void deleteAtEnd(Node*& head) {
    if (head == NULL) {
        cout << "List is empty, nothing to delete.\n";
        return;
    }

    if (head->next == NULL) {
        // Only one node in the list
        delete head;
        head = NULL;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL && temp->next->next != NULL) {
        temp = temp->next;
    }

    // Delete the last node
    delete temp->next;
    temp->next = NULL;
}

// Function to display the linked list
void display(Node* head) {
    cout << "Linked List: ";
    while (head != NULL) {
        cout << head->data << " -> ";
        head = head->next;
    }
    cout << "NULL" << endl;
}

int main() {
    Node* head = NULL;  // Start with empty list
    int n, value;

    cout << "How many nodes do you want to insert? ";
    cin >> n;

    for (int i = 0; i < n; i++) {
        cout << "Enter value for node " << i + 1 << ": ";
        cin >> value;
        insertAtEnd(head, value);
    }

    display(head);

    // Deleting a node at the start
    deleteAtStart(head);
    cout << "After deleting at the start:\n";
    display(head);

    // Deleting a node at position 4
    deleteAtPosition(head, 4);
    cout << "After deleting at position 4:\n";
    display(head);

    // Deleting a node at the end
    deleteAtEnd(head);
    cout << "After deleting at the end:\n";
    display(head);

    return 0;
}

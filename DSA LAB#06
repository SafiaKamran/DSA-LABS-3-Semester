  TASK#01:
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

class CircularDoublyLinkedList {
private:
    Node* head;

public:
    CircularDoublyLinkedList() {
        head = NULL;
    }
    
    void insertAtStart(int value) {
        Node* newNode = new Node;
        newNode->data = value;

        if (head == NULL) {
            newNode->next = newNode;
            newNode->prev = newNode;
            head = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            head->prev = newNode;
            last->next = newNode;

            head = newNode;
        }

        cout << "Inserted " << value << " at the start.\n";
    }

   
	void insertAtEnd(int value) {
        Node* newNode = new Node;
        newNode->data = value;

        if (head == NULL) {
            newNode->next = newNode;
            newNode->prev = newNode;
            head = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }

        cout << "Inserted " << value << " at the end.\n";
    }


    void insertAtPosition(int value, int pos) {
        if (pos < 1) {
            cout << "Invalid position.\n";
            return;
        }

        if (pos == 1) {
            insertAtStart(value);
            return;
        }

        Node* newNode = new Node;
        newNode->data = value;

        Node* temp = head;
        int count = 1;

        while (count < pos - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (count != pos - 1) {
            cout << "Position out of range.\n";
            delete newNode;
            return;
        }

        Node* nextNode = temp->next;

        newNode->next = nextNode;
        newNode->prev = temp;

        temp->next = newNode;
        nextNode->prev = newNode;

        cout << "Inserted " << value << " at position " << pos << ".\n";
    }

    void display() {
        if (head == NULL) {
            cout << "List is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "Circular Doubly Linked List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << "\n";
    }

 
    ~CircularDoublyLinkedList() {
        if (head == NULL) return;

        Node* temp = head->next;
        while (temp != head) {
            Node* nextNode = temp->next;
            delete temp;
            temp = nextNode;
        }
        delete head;
    }
};


int main() {
    CircularDoublyLinkedList cdll;

    cdll.insertAtEnd(10);
    cdll.insertAtStart(5);
   cdll.display();
    cdll.insertAtPosition(12, 3);
     cdll.display();

    cdll.insertAtPosition(1, 1);
       cdll.display();
    cdll.insertAtPosition(20, 10); 

    cdll.display();

    return 0;
}


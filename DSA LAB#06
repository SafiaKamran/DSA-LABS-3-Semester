  TASK#01:
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

class CircularDoublyLinkedList {
private:
    Node* head;

public:
    CircularDoublyLinkedList() {
        head = NULL;
    }
    
    void insertAtStart(int value) {
        Node* newNode = new Node;
        newNode->data = value;

        if (head == NULL) {
            newNode->next = newNode;
            newNode->prev = newNode;
            head = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            head->prev = newNode;
            last->next = newNode;

            head = newNode;
        }

        cout << "Inserted " << value << " at the start.\n";
    }

   
	void insertAtEnd(int value) {
        Node* newNode = new Node;
        newNode->data = value;

        if (head == NULL) {
            newNode->next = newNode;
            newNode->prev = newNode;
            head = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;

            last->next = newNode;
            head->prev = newNode;
        }

        cout << "Inserted " << value << " at the end.\n";
    }


    void insertAtPosition(int value, int pos) {
        if (pos < 1) {
            cout << "Invalid position.\n";
            return;
        }

        if (pos == 1) {
            insertAtStart(value);
            return;
        }

        Node* newNode = new Node;
        newNode->data = value;

        Node* temp = head;
        int count = 1;

        while (count < pos - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (count != pos - 1) {
            cout << "Position out of range.\n";
            delete newNode;
            return;
        }

        Node* nextNode = temp->next;

        newNode->next = nextNode;
        newNode->prev = temp;

        temp->next = newNode;
        nextNode->prev = newNode;

        cout << "Inserted " << value << " at position " << pos << ".\n";
    }

    void display() {
        if (head == NULL) {
            cout << "List is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "Circular Doubly Linked List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << "\n";
    }

 
    ~CircularDoublyLinkedList() {
        if (head == NULL) return;

        Node* temp = head->next;
        while (temp != head) {
            Node* nextNode = temp->next;
            delete temp;
            temp = nextNode;
        }
        delete head;
    }
};


int main() {
    CircularDoublyLinkedList cdll;

    cdll.insertAtEnd(10);
    cdll.insertAtStart(5);
   cdll.display();
    cdll.insertAtPosition(12, 3);
     cdll.display();

    cdll.insertAtPosition(1, 1);
       cdll.display();
    cdll.insertAtPosition(20, 10); 

    cdll.display();

    return 0;
}

TASK#02:

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

class CircularDoublyLinkedList {
private:
    Node* head;

public:
    CircularDoublyLinkedList() {
        head = NULL;
    }

    // Insert at end (for testing)
    void insertAtEnd(int value) {
        Node* newNode = new Node;
        newNode->data = value;

        if (head == NULL) {
            newNode->next = newNode;
            newNode->prev = newNode;
            head = newNode;
        } else {
            Node* last = head->prev;

            newNode->next = head;
            newNode->prev = last;
            last->next = newNode;
            head->prev = newNode;
        }
    }

    // Delete from the start
    void deleteAtStart() {
        if (head == NULL) {
            cout << "List is empty. Nothing to delete.\n";
            return;
        }

        if (head->next == head) { // Only one node
            delete head;
            head = NULL;
            cout << "Deleted the only node in the list.\n";
            return;
        }

        Node* last = head->prev;
        Node* toDelete = head;

        head = head->next;
        head->prev = last;
        last->next = head;

        delete toDelete;
        cout << "Deleted node from the start.\n";
    }

    // Delete from the end
    void deleteAtEnd() {
        if (head == NULL) {
            cout << "List is empty. Nothing to delete.\n";
            return;
        }

        if (head->next == head) {
            delete head;
            head = NULL;
            cout << "Deleted the only node in the list.\n";
            return;
        }

        Node* last = head->prev;
        Node* secondLast = last->prev;

        secondLast->next = head;
        head->prev = secondLast;

        delete last;
        cout << "Deleted node from the end.\n";
    }

    // Delete from a specific position (1-based index)
    void deleteAtPosition(int pos) {
        if (head == NULL || pos < 1) {
            cout << "Invalid operation. List is empty or position is invalid.\n";
            return;
        }

        if (pos == 1) {
            deleteAtStart();
            return;
        }

        Node* temp = head;
        int count = 1;

        while (count < pos && temp->next != head) {
            temp = temp->next;
            count++;
        }

        if (count != pos) {
            cout << "Position out of range.\n";
            return;
        }

        Node* prevNode = temp->prev;
        Node* nextNode = temp->next;

        prevNode->next = nextNode;
        nextNode->prev = prevNode;

        delete temp;
        cout << "Deleted node at position " << pos << ".\n";
    }

    // Display the list
    void display() {
        if (head == NULL) {
            cout << "List is empty.\n";
            return;
        }

        Node* temp = head;
        cout << "Circular Doubly Linked List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << "\n";
    }

    // Destructor to free memory
    ~CircularDoublyLinkedList() {
        if (head == NULL) return;

        Node* temp = head->next;
        while (temp != head) {
            Node* nextNode = temp->next;
            delete temp;
            temp = nextNode;
        }
        delete head;
    }
};

// Main function to demonstrate
int main() {
    CircularDoublyLinkedList cdll;

    // Create initial list
    cdll.insertAtEnd(10);
    cdll.insertAtEnd(20);
    cdll.insertAtEnd(30);
    cdll.insertAtEnd(40);
    cdll.display();

    cdll.deleteAtStart();
    cdll.display();

    cdll.deleteAtEnd();
    cdll.display();

    cdll.deleteAtPosition(2);
    cdll.display();

    
    cdll.deleteAtStart();     // Deletes last remaining node
    cdll.display();

    return 0;
}
